// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  accountType AccountType @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions     Session[]
  apiKeys      ApiKey[]
  chatMessages ChatMessage[]
  codeProjects CodeProject[]
  superQueries SuperQuery[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  key         String   @unique
  isActive    Boolean  @default(true)
  isInUse     Boolean  @default(false)
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  content   String
  role      MessageRole
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model CodeProject {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  code        String
  language    String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("code_projects")
}

model SuperQuery {
  id        String   @id @default(cuid())
  userId    String
  query     String
  response  String
  models    String[] // Array of model names used
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("super_queries")
}

enum AccountType {
  USER
  DEVELOPER
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
